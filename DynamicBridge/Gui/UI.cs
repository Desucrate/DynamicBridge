using Dalamud.Interface.Components;
using DynamicBridge.Configuration;
using DynamicBridge.IPC.Glamourer;
using ECommons;
using ECommons.Configuration;
using ECommons.GameHelpers;
using ECommons.Reflection;
using ECommons.SimpleGui;
using Lumina.Excel.GeneratedSheets;
using Newtonsoft.Json.Linq;
using System.Runtime.ConstrainedExecution;
using System.Xml.Linq;

namespace DynamicBridge.Gui
{
    public unsafe static class UI
    {

        public static Profile SelectedProfile = null;
        public static Profile Profile => SelectedProfile ?? Utils.GetProfileByCID(Player.CID);
        public const string RandomNotice = "Will be randomly selected between:\n";
        public const string AnyNotice = "Meeting any of the following conditions will result in rule being triggered:\n";
        static string PSelFilter = "";
        public static string RequestTab = null;

        public static void DrawMain()
        {
            var resolution = "";
            if (Player.CID == 0) resolution = "Not logged in";
            else if (C.Blacklist.Contains(Player.CID)) resolution = "Character blacklisted";
            else if (Utils.GetProfileByCID(Player.CID) == null) resolution = "No associated profile";
            else resolution = $"Profile {Utils.GetProfileByCID(Player.CID).Name}";
            if (!C.Enable && Environment.TickCount64 % 2000 > 1000) resolution = "PLUGIN DISABLED BY SETTINGS";
            EzConfigGui.Window.WindowName = $"{DalamudReflector.GetPluginName()} v{P.GetType().Assembly.GetName().Version} [{resolution}]###{DalamudReflector.GetPluginName()}";
            if (ImGui.IsWindowAppearing())
            {
                Utils.ResetCaches();
                foreach (var x in Svc.Data.GetExcelSheet<Weather>()) ThreadLoadImageHandler.TryGetIconTextureWrap((uint)x.Icon, false, out _);
                foreach (var x in Svc.Data.GetExcelSheet<Emote>()) ThreadLoadImageHandler.TryGetIconTextureWrap(x.Icon, false, out _);
            }
            KoFiButton.DrawRight();
            ImGuiEx.EzTabBar("TabsNR", true, RequestTab, [
                //("Settings", Settings, null, true),
                ("Profiles", GuiProfiles.DrawProfiles, EColor.GreenBright, true),
                ("Characters", GuiProfiles.DrawCharacters, EColor.GreenBright, true),
                ("Dynamic Rules", GuiRules.Draw, EColor.GreenBright, true),
                ("Presets", GuiPresets.DrawUser, EColor.GreenBright, true),
                ("Global Presets", GuiPresets.DrawGlobal, EColor.YellowBright, true),
                ("Layered Designs", ComplexGlamourer.Draw, EColor.PurpleBright, true),
                ("House Registration", HouseReg.Draw, EColor.PurpleBright, true),
                ("Settings", GuiSettings.Draw, null, true),
                InternalLog.ImGuiTab(),
                (C.Debug?"Debug":null, Debug.Draw, ImGuiColors.DalamudGrey3, true),
                ]);
            RequestTab = null;
        }

        public static void ProfileSelectorCommon()
        {
            if (SelectedProfile != null && !C.ProfilesL.Contains(SelectedProfile)) SelectedProfile = null;
            var currentCharaProfile = Utils.GetProfileByCID(Player.CID);

            if (SelectedProfile == null)
            {
                if (currentCharaProfile == null)
                {
                    if (C.Blacklist.Contains(Player.CID))
                    {
                        ImGuiEx.InputWithRightButtonsArea(() => Utils.BannerCombo("blisted", $"\"{Player.NameWithWorld}\" is blacklisted. Select a profile to edit it.", ProfileSelectable), () =>
                        {
                            if(ImGuiComponents.IconButtonWithText(FontAwesomeIcon.ArrowCircleUp, "Unblacklist"))
                            {
                                C.Blacklist.Remove(Player.CID);
                            }
                        });
                    }
                    else if (Player.CID != 0)
                    {
                        ImGuiEx.SetNextItemFullWidth();
                        ImGuiEx.InputWithRightButtonsArea(() => Utils.BannerCombo("noprofile", $"\"{Player.NameWithWorld}\" has no associated profile. Select other profile to edit or associate profile in Characters tab.", ProfileSelectable), () =>
                        {
                            if(ImGuiComponents.IconButtonWithText(FontAwesomeIcon.PlusCircle, "Create Empty"))
                            {
                                var profile = new Profile();
                                C.ProfilesL.Add(profile);
                                profile.Characters = [Player.CID];
                                profile.Name = $"Autogenerated Profile for {Player.Name}";
                            }
                            ImGuiEx.Tooltip($"Create new empty profile and assign it to current character");
                        });
                    }
                    else
                    {
                        ImGuiEx.SetNextItemFullWidth();
                        Utils.BannerCombo("nlg", $"You are not logged in. Please select profile to edit.", ProfileSelectable);
                    }
                }
                else
                {
                    UsedByCurrent();
                }
            }
            else
            {
                if (currentCharaProfile == SelectedProfile)
                {
                    UsedByCurrent();
                }
                else
                {
                    ImGuiEx.InputWithRightButtonsArea(() => Utils.BannerCombo("EditNotify", $"You are editing profile \"{SelectedProfile.Name}\". It is not used by \"{Player.NameWithWorld}\".", ProfileSelectable, EColor.YellowDark), () =>
                    {
                        if (!C.Blacklist.Contains(Player.CID))
                        {
                            if (ImGuiComponents.IconButtonWithText(FontAwesomeIcon.Link, "Link"))
                            {
                                new TickScheduler(() => SelectedProfile.SetCharacter(Player.CID));
                            }
                            ImGuiEx.Tooltip($"Assign profile {SelectedProfile?.Name} to {Player.NameWithWorld}");
                        }
                        else
                        {
                            ImGuiEx.HelpMarker("Your current character is blacklisted", null, FontAwesomeIcon.ExclamationTriangle.ToIconString());
                        }
                    });
                }
            }

            void UsedByCurrent()
            {
                ImGuiEx.InputWithRightButtonsArea(() => Utils.BannerCombo("EditNotify", $"You are editing profile \"{currentCharaProfile.Name}\" which is used by \"{Player.NameWithWorld}\".", ProfileSelectable, EColor.GreenDark), () =>
                {
                    if (ImGuiComponents.IconButtonWithText(FontAwesomeIcon.Unlink, "Unlink"))
                    {
                        new TickScheduler(() => currentCharaProfile.Characters.Remove(Player.CID));
                    }
                    ImGuiEx.Tooltip($"Unassign profile {currentCharaProfile?.Name} from {Player.NameWithWorld}");
                });
            }

            void ProfileSelectable()
            {
                if(ImGui.Selectable("- Current character -", SelectedProfile == null))
                {
                    SelectedProfile = null;
                }
                ImGui.Separator();
                ImGuiEx.SetNextItemWidthScaled(150f);
                ImGui.InputTextWithHint($"##SearchCombo", "Filter...", ref PSelFilter, 50);
                foreach(var x in C.ProfilesL)
                {
                    if (PSelFilter.Length > 0 && !x.Name.Contains(PSelFilter, StringComparison.OrdinalIgnoreCase)) continue;
                    if (SelectedProfile == x && ImGui.IsWindowAppearing()) ImGui.SetScrollHereY();
                    if(ImGui.Selectable($"{x.Name}##{x.GUID}", SelectedProfile == x))
                    {
                        new TickScheduler(() => SelectedProfile = x);
                    }
                }
            }
        }
    }
}
